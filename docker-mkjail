#!/bin/sh
#
# Creates a jail-container for the user specified on the command line. Uses
# the ubuntu image by default. Customize this to your needs. In particular,
# the default base image you want to use for your jail, and the commands to
# be executed in the jail after it has been created..
#
# In my case, I remove the SUID/SGID-bit from all SUID and SGID-binaries,
# since I want to minimize the risk of privilege escalation and breaking out
# of the Docker container. Of course, with a kernel vulnerability, it would
# still be game over...
#
# Copyright (C) Joel Eriksson <je@clevcode.org> 2014
#

if [ $# -lt 1 ]; then
    echo "Usage: $0 USER [HOSTNAME] [JAILNAME] [IMAGE] [SHELL]" >&2
    exit 1
fi

if [ $(id -u) -ne 0 ]; then
    echo "This command must be run as root." >&2
    exit 2
fi

# The name of the base jail container
JAILNAME=jail

REAPER=$(which docker-reaper)

if [ "$REAPER" = "" ]; then
    echo "The docker-reaper binary was not found." >&2
    echo "Have you run 'sudo make install' yet?" >&2
    exit 3
fi

# The image to use when building the initial jail container
JAIL_IMAGE=ubuntu:trusty

# The hostname to use for the jail
JAIL_HOSTNAME=jail

# The shell to assign to the jailed user, within the jail
JAIL_SHELL=/bin/bash

if [ $# -ge 2 ]; then
    JAIL_HOSTNAME="$2"
fi

if [ $# -ge 3 ]; then
    JAIL_IMAGE="$3"
fi

if [ $# -ge 4 ]; then
    JAILNAME="$4"
fi

if [ $# -ge 5 ]; then
    JAIL_SHELL="$5"
fi

usr="$1"

psw=$(grep "^$usr:" /etc/passwd)

if [ "$psw" = "" ]; then
    echo "No such user: $usr" >&2
    exit 4
fi

uid=$(echo "$psw" | cut -d: -f3)
gid=$(echo "$psw" | cut -d: -f4)
dir=$(echo "$psw" | cut -d: -f6)
grp=$(awk -F: "\$3 == $gid { print \$1 }" < /etc/group)

if [ "$uid" = "0" ]; then
    echo "Setting up a jail for a user with root-privileges is meaningless. Don't." >&2
    exit 5
fi

if [ "$dir" = "/" ]; then
    echo "The home directory for the user you want to create a jail for is /." >&2
    echo "That would be a pretty bad idea..." >&2
    exit 6
fi

docker inspect "$JAILNAME" >/dev/null 2>&1

if [ $? -ne 0 ]; then
    echo "Could not find jail container, creating..." >&2
    docker run --name="$JAILNAME" -h "$JAIL_HOSTNAME" -v "$REAPER:/sbin/reaper:ro" -d "$JAIL_IMAGE" /sbin/reaper
    docker-cmd "$JAILNAME" root apt-get -y update
    docker-cmd "$JAILNAME" root apt-get -y upgrade
    docker-cmd "$JAILNAME" root apt-get -y dist-update
    # For scp and sftp to work, these must be installed within the jail
    docker-cmd "$JAILNAME" root apt-get -y install openssh-client openssh-server
    # Install a bunch of other useful packages, customize these any way you like
    docker-cmd "$JAILNAME" root apt-get -y install python python-doc man-db manpages manpages-dev tmux
    docker-cmd "$JAILNAME" root apt-get -y install python-examples binutils binfmt-support cpp
    docker-cmd "$JAILNAME" root apt-get -y install tmux ctags vim vim-doc vim-scripts vim-nox
    # Disable all SUID/SGID binaries. Do this after all packages have been installed.
    docker-cmd "$JAILNAME" root sh -c "find / -type f '(' -perm -4000 -o -perm -2000 ')' -exec chmod ug-s {} \\; 2>/dev/null"
    docker stop -t 1 "$JAILNAME" >/dev/null
    docker commit "$JAILNAME" "$JAILNAME"
fi

docker inspect "${JAILNAME}_$usr" >/dev/null 2>&1

if [ $? -eq 0 ]; then
    echo "Jail for user already exists, removing..." >&2
    docker stop -t 1 "${JAILNAME}_$usr" >/dev/null
    docker rm "${JAILNAME}_$usr" >/dev/null
fi

echo "Creating jail for user $usr..." >&2
docker run --name="${JAILNAME}_${usr}" -h "$JAIL_HOSTNAME" -v "$REAPER:/sbin/reaper:ro" -v "$dir:$dir:rw" -d "$JAILNAME" >/dev/null

if [ $? -ne 0 ]; then
    echo "Docker failed to create jail. :(" >&2
    exit 7
fi

docker-cmd "${JAILNAME}_${usr}" root groupadd -g "$gid" "$grp"
docker-cmd "${JAILNAME}_${usr}" root useradd -s "$JAIL_SHELL" -u "$uid" -g "$gid" -d "$dir" "$usr"

cat > /etc/sudoers.d/jail_$usr << EOF
$usr ALL=(root) NOPASSWD: $(which docker-cmd) ${JAILNAME}_$usr $usr
$usr ALL=(root) NOPASSWD: $(which docker-cmd) ${JAILNAME}_$usr $usr *
EOF
usermod -s $(which docker-jailsh) $usr

exit 0
